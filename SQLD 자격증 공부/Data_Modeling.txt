[1] 데이터모델링의 이해

#모델링 특징 : '단추사정'
1. 단순화 : 제한된 언어·표기법
2. 추상화 : 일정 형식 표현
3. 사전작업 : 시스템 구현 포함한 업무분석·업무형상화 목적
4. 정확화 : 정확하게 현상기술

#모델링 필요성
1. 기초 정보에 대해 일정 표기법에 의해 표현
2. 분석된 모델로 데이터베이스 생성 -> 개발·데이터관리에 사용
3. 데이터모델링 자체로서 업무의 흐름설명·분석 의미
4. 데이터베이스 구축 및 업무설명, 분석 목적 -> 별도의 표기법으로 설명

#모델링 유의점(중복X, 비유연성, 비유일성)
1. 같은 정보 저장X -> 중복성 최소화
2. (데이터 정의) (데이터 사용 프로세스) 분리 -> 유연성↑
3. 데이터 상호관계 명확하게 정의 -> 데이터 일관성 유지
cf) 사용자가 처리하는 프로세스나 장표 등에 따라 매핑이 될 수 있도록 프로그램과 테이블간의 연계성을 높인다.
=> 연계성(X)

#모델링 종류
1. 개념적 데이터 모델링 : 추상화↑, 업무중심적·포괄적
2. 논리적 데이터 모델링 : 업무에 대해 정확하게 표현, 재사용성↑
3. 물리적 데이터 모델링 : 실제로 데이터베이스 이식할 수 있도록 물리적 성격 고려

#데이터베이스 스키마 구조(개념, 내부, 외부)
개념스키마 
(1) 모든 사용자 관점 통합 -> 조직 전체 관점의 통합적 표현
(2) 통합형 조직 전체 DB(DB 저장 데이터·관계 표현)

#ERD
1. 최초 : 피터첸 ERModel 표기법(엔터티 관계 모델)
2. '도배설정기술' => 엔터티 도출 -> 엔터티 배치 -> 관계설정 -> 관계명 기술
3. 관계 표현에 있어 관계의 명칭은 매우 중요함
4. 배치 : 가독성 측면에 있어 중요도를 고려(주로 왼쪽 상단부터 배치)
cf) Entity : 실체·객체, 정보저장&관리목적 집합체

#엔터티 특징
1. 해당 업무에서 필요하고 관리하고자 하는 정보&업무프로세스에 의해 이용
2. 유일한 식별자, 속성 반드시 필요
3. 인스턴스의 집합체(2개 이상)
4. 타 엔터티와 최소 1개 이상의 관계O

#기본엔터티(=키 엔터티)
1. 타 엔터티와 관계 생성X
2. 주식별자 상속X -> 고유 주식별자 소유(독립 생성 가능)
ex)사원, 부서, 고객, 상품, 자재

#엔터티 이름 부여
1. 현업업무 용어 사용 -> 의미 분명
2. 약어 사용 지양
3. 단수명사 사용&유일한 이름
4. 생성의미대로 부여

#속성 : 업무에서 필요로 하는 인스턴스에서 관리하고자 하는 의미상 더 이상 분리되지 않는 최소의 데이터 단위

#엔터티 1개 : 인스턴스 2개 이상의 집합

#엔터티 1개 : 속성 2개 이상 소유

#속성 1개 : 속성 값 1개
1. 속성도 집합이다.(X)
2. 하나의 인스턴스에서 각 속성은 하나 이상 속성 값 소유(O)

#속성의 특성에 따른 분류
1. 기본속성 : 가장 일반적 속성
2. 설계속성 : 업무상 필요데이터 외 새로 만들거나 변형하여 정의하는 속성
3. 파생속성
(1) 타 속성에 영향을 받아 발생하는 속성(가급적 적게 정의)
(2) 데이터 조회 시 빠른 성능 목적(원래 속성 값 계산하여 저장)

#도메인 : 각 속성이 가질 수 있는 값의 범위(데이터 타입·제약사항 정의)

#모델링 관계
1. 존재 관계{ex)소속(부서-사원)}, 행위 관계{ex)배송근거(주문-배송)} -> ERD 연결 시 단일 표기법
2. UML에는 연관관계, 의존관계 -> 실선·점선 표기법
3. 표기법 : '명차수 선택' => 관계명, 관계차수{일대일, 일대다(1:M), 다대다(M:M)}, 선택성(=선택사양)

#2개의 엔터티 정의 관계 고려사항 : '연합 동사규칙'
1. 연관규칙
2. 정보 조합 발생여부
3. 관계 연결 규칙 서술여부
4. 관계 연결 가능여부에 따른 동사 유무 cf)명사(X)

★식별자 관련 중요
#주식별자 특징 : '소유값 변함X'
1. 유일성 : 엔터티 내에 모든 인스턴스 유일하게 구분
2. 최소성 : 구성하는 속성 수는 유일성을 만족하는 최소의 수
3. 불변성 : 자주 변하지 않는 값
4. 존재성 : 지정 시 반드시 값이 들어와야함(=not null)

#식별자 종류
1. 대표성 여부 : 주식별자, 보조식별자
2. 스스로 생성되었는지 여부 : 내부식별자(스스로 생성), 외부식별자(FK 필요)
3. 속성의 개수 : 단일식별자, 복합식별자
4. 대체 여부
(1) 본질식별자 : 업무에 의해 생성 ex)일련번호
(2) 인조식별자 : 인위적으로 생성

#식별자&비식별자 관계
1. 식별자 관계
(1) 강한 연결관계, 실선
(2) 자식 주식별자의 구성에 포함(부모 주식별자 포함 필요)
(3) 연결 고려사항 : 반드시 부모엔터티 종속, 상속받은 주식별자 속성 -> 타 엔터티에 이전필요
2. 비식별자 관계
(1) 약한 연결관계, 점선
(2) 자식 일반 속성에 포함(부모 주식별자 부분 필요)
(3) 연결 고려사항 : 자식 주식별자 독립적 구성, 부모쪽 관계참여(선택사항) , 상속받은 주식별자 속성 -> 타 엔터티 차단 필요
cf)부모엔터티 주식별자를 손자 엔터티까지 계속 흘려보내기 위해 비식별자 관계를 고려
=> (X) / 식별자 관계를 고려사항
cf)모든 관계가 식별자로 연결되면 SQL Where절에서 비교하는 항목이 증가되어 조인에 참여하는 테이블에 따라 SQL문장이 길어져
SQL문의 복잡성이 증가되는 것으 ㄹ방지하기 위해 비식별자 관계를 고려한다.
=> (O) / 가장 마지막으로 고려할 만한 비중
cf)여러 개의 엔터티를 하나로 통합하면서 각각의 엔터티가 갖고 있던 여러 개의 개별관계가 통합되는 경우 비식별자 관계로 연결한다.
=> (O)